 #include <GL/glut.h>
 #include <cmath>
 #include <iostream>

 void bezierCurve(float x0, float y0, float x1, float y1, float x2, float y2, int depth) 
if (depth == 0) {
         glBegin(GL_LINES);
         glVertex2f(x0, y0);
         glVertex2f(x2, y2);
         glEnd();
         return;
     }

     float x01 = (x0 + x1) / 2.0f;
     float y01 = (y0 + y1) / 2.0f;

     float x12 = (x1 + x2) / 2.0f;
     float y12 = (y1 + y2) / 2.0f;

     float x02 = (x01 + x12) / 2.0f;
     float y02 = (y01 + y12) / 2.0f;

     bezierCurve(x0, y0, x01, y01, x02, y02, depth - 1);
     bezierCurve(x02, y02, x12, y12, x2, y2, depth - 1);
 }
     void display() {
     glClear(GL_COLOR_BUFFER_BIT);

     float x0 = -0.5f, y0 = -0.5f;
     float x1 =  0.0f, y1 =  0.5f;
     float x2 =  0.5f, y2 = -0.5f;
     glColor3f(0.0f, 1.0f, 0.0f);  
     bezierCurve(x0, y0, x1, y1, x2, y2, 5); 

     glutSwapBuffers();
 }

 void init() {
    glClearColor(0.0f, 0.0f, 0.0f, 1.0f); 
      glMatrixMode(GL_PROJECTION);
     glLoadIdentity();
     gluOrtho2D(-1.0, 1.0, -1.0, 1.0);  
 }

int main(int argc, char** argv) {
     glutInit(&argc, argv);
     glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
     glutInitWindowSize(500, 500);
   glutCreateWindow("Bezier Fractal");

     init();
     glutDisplayFunc(display);
     glutMainLoop();

     return 0;
 }
